人脸识别的流程：
1. 首先对于获取的图片首先进行人脸的提取，这里使用的是opencv的haar模型，大家可以在opencv的包里找到haarcascade_frontalface_alt2.xml文件。
2. 其次把处理好的图片进行统一的处理，这里把所有的图片转换成了正方形。
3. 然后把图片数据转化为向量（或者叫张量），并用sklearn把图片数据划分为训练集，测试集和验证集。
4. 之后使用keras搭建模型，分为卷积，激活函数层（减小训练量），池化，Dropout层，卷积，激活函数层，池化，Dropout层，Flatten层，全连接层，激活函数层，Dropout层，Dense层，分类层（输出层）。
5. 补充一点，介绍每层的作用：卷积层用来提取特征（依靠卷积核），池化层用来减少训练量，Dropout层主要引入随机性（减小过拟合现象），Flatten层用于将数据变为一维，全连接层可以参照一般的神经网络不提了。
6. 在训练前在进行一些数据增强，具体有xxx
7. 最后开始训练的得到了h5.model这个文件
8. 接下来就可以进行人脸识别了

人脸识别的原理：
实现人脸识别的技术有很多，这里仅介绍本项目中用到的方法
一、首先介绍一下CNN（Convolutional Neural Network）卷积神经网络。
1. 什么是卷积神经网络？
卷积神经网络是一类包含卷积计算且具有深度结构的前馈神经网络。
2. 卷积神经网络的优点是什么？
首先卷积计算可以有效的减少参数的数量，经常用于图像处理中。
其次卷积神经网络具有较好的局部感知能力。（很大程度上依赖与卷积核的滑动）
最后卷积神经网络能够实现权值共享（例如卷积核，能够减少训练参数）
3. 卷积神经网络的结构是什么？
输入层：一般用于进行数据的标准化处理。
隐含层：一般包含卷积层，池化层（卷积和池化是特有的），全连接层等。
输出层：与一般的神经网络类似，不在赘述。
二、为什么可以实现人脸识别。
人们对于图像的识别其实是对于图像特证的匹配，只要计算机能够找到这些特征并且能够用于对比，那么就可以实现人脸识别了，
首先计算机如何提取特征呢？这里就要提到卷积了，一张图像在计算机看来是一个多维的数组，而我们眼中的特征，其实是某些量的
特定排布方式，特定的卷积核（是训练出来的）对多维数组进行卷积操作就可以与这些特定的排布方式相匹配，从而进行特征的匹配
，之后也就自然可以进行人脸识别了。
需要强调的是，人脸识别在某种意义上只是一个概率（参考贝叶斯公式），可以从这个角度来理解哦。